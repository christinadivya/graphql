import type { Factory } from './factory';
import type { Constructable, FactorizedAttrs } from './types';
export declare class Subfactory<T> {
    private factoryInstance;
    private values?;
    private count?;
    constructor(factory: Constructable<Factory<T>>);
    constructor(factory: Constructable<Factory<T>>, values?: Partial<FactorizedAttrs<T>>);
    constructor(factory: Constructable<Factory<T>>, count?: number);
    constructor(factory: Constructable<Factory<T>>, values?: Partial<FactorizedAttrs<T>>, count?: number);
    create(): Promise<T[]> | Promise<T>;
    make(): Promise<T[]> | Promise<T>;
}
